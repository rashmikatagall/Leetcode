class Solution {
    public int numIslands(char[][] grid) {
        
        if(grid == null || grid.length == 0)
            return 0;
        
        int r = grid.length;
        int c = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        boolean[][] seen = new boolean[r][c];
        
        int count = 0;
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j] == '1' && !seen[i][j])
                {
                    q.add(new int[]{i,j});
                    seen[i][j] = true;
                    count++;
                    while(!q.isEmpty())
                    {
                        int[] first = q.poll();
                        for(int[] dir : dirs)
                        {
                            int r1 = first[0]+dir[0];
                            int c1 = first[1]+dir[1];
                            if(r1>=0 && r1<r && c1>=0 && c1<c && grid[r1][c1]=='1' && !seen[r1][c1])
                            {
                                q.add(new int[]{r1,c1});
                                seen[r1][c1] = true;
                            }
                        }
                        
                    }
                }
            }
        }
        
        return count;
    }
}
