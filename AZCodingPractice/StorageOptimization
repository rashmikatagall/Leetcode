import java.util.Arrays;
import java.util.*;
import java.util.Scanner;
import java.util.stream.Collectors;

class Solution {
    public static int storageOptimization(int n, int m, List<Integer> h, List<Integer> v) {
        // WRITE YOUR BRILLIANT CODE HERE
        List<Integer> horizontal = new ArrayList<>();
        List<Integer> vertical = new ArrayList<>();
        int horiDiff = Integer.MIN_VALUE;
        int vertiDiff = Integer.MIN_VALUE;
        
        for(int i=0;i<=n+1;i++)
            if(!h.contains(i))
              horizontal.add(i);
        
         for(int i=0;i<=m+1;i++)
            if(!v.contains(i))
              vertical.add(i);
        
         for(int i=1;i<horizontal.size();i++)
              horiDiff = Math.max(horiDiff,horizontal.get(i) - horizontal.get(i-1)) ;
        
         for(int i=1;i<vertical.size();i++)
              vertiDiff = Math.max(vertiDiff,vertical.get(i) - vertical.get(i-1));
        
        return horiDiff * vertiDiff;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());
        int m = Integer.parseInt(scanner.nextLine());
        List<Integer> h = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> v = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        scanner.close();
        int res = storageOptimization(n, m, h, v);
        System.out.println(res);
    }
}
