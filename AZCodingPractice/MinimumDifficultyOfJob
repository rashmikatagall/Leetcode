class Solution {
    public int minDifficulty(int[] jobDifficulty, int d) {
      
        if(jobDifficulty.length < d)
            return -1;
  
      int[][] dp = new int[jobDifficulty.length][d+1];  

      for(int i=0;i<dp.length;i++)
        for(int j=0;j<dp[0].length;j++)
            dp[i][j] = -1;
        
        
      return minDiff(jobDifficulty, 0, 1, d, dp);
      
    }
    
    
    public int minDiff(int[] jobDifficulty, int start, int n, int d, int[][] dp)
    {
        if(n > d)
            return 0;
        
        if(dp[start][n] != -1)
            return dp[start][n];
        
        int jobs = jobDifficulty.length;
        if (n == d){
            int currentMax = Integer.MIN_VALUE;
        for (int i=start;i<jobs;i++){
            currentMax = Math.max(currentMax, jobDifficulty[i]);
        }
            dp[start][n] = currentMax;
            return currentMax;
        }
        
        int min = Integer.MAX_VALUE;
        int currentMax = Integer.MIN_VALUE;
      
        for (int i=start;i<jobs-(d-n);i++){
            currentMax = Math.max(currentMax, jobDifficulty[i]);
            min = Math.min(min, minDiff(jobDifficulty, i+1, n+1, d, dp)+currentMax);
        }
        dp[start][n] = min;
        return min;
        }      
        
    }
