import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/*
 * Given a list of items in groups, perform certain operations in order to satisfy the constaints required by packaging automation.
The conditions are as follows:

    The first group must contain 1 item only.
    For all the other groups, the difference between the number of items in adjacent groups must be greater than 1. In other words, for 1 <= i <= n, arr[i] - arr[i - 1] <= 1. To accomplish this, the following operations are available:
            Rearrange the groups in any way.
            Reduce any group to any number that is >= 1.

Write an algorithm to find the maximum items that can be packaged for the final group of the list given the conditions above.

Example - 1 -- arr = [3, 1, 3, 4]. Output: 4. Explanation: Subtract 1 from the first group making the list [2, 1, 3, 4]. Rearrange the list into [1, 2, 3, 4]. The final maximum of items that can be packaged in the last group is 4.

Example 2 - arr = [1, 1, 1, 1]. Output is 1.
 */
public class PackagingAutomation {

	
	public static int solution(List<Integer> list)
	{
		Collections.sort(list);
		
		list.set(0, 1);
		
		int index = 1;
		
		while(index < list.size()) {
			
			if(list.get(index) > list.get(index-1))
			{
				list.set(index, list.get(index-1)+1);
			}
			
			index++;
			
		}
		
		return list.get(index-1);
		
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        
		int[] list = {1,0,0};
		List<Integer> list1 = Arrays.stream(list).boxed().collect(Collectors.toList());
		
		int answer = solution(list1);
		
		System.out.println(answer);
	}

}
