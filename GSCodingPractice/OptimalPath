package com.gs.high;

import java.util.*;

public class OptimalPath {

	/*
	** Instructions to candidate.
	**  1) You are an avid rock collector who lives in southern California. Some rare 
	**     and desirable rocks just became available in New York, so you are planning 
	**     a cross-country road trip. There are several other rare rocks that you could 
	**     pick up along the way. 
	**     
	**     You have been given a grid filled with numbers, representing the number of 
	**     rare rocks available in various cities across the country.  Your objective 
	**     is to find the optimal path from So_Cal to New_York that would allow you to 
	**     accumulate the most rocks along the way. 
	**     
	**     Note: You can only travel either north (up) or east (right).
	**  2) Consider adding some additional tests in doTestsPass().
	**  3) Implement optimalPath() correctly.
	**  4) Here is an example:
	**                                                           ^
	**                 {{0,0,0,0,5}, New_York (finish)           N
	**                  {0,1,1,1,0},                         < W   E >
	**   So_Cal (start) {2,0,0,0,0}}                             S
	**                                                           v 
	**   The total for this example would be 10 (2+0+1+1+1+0+5).
	*/

		public static int optimalPath(Integer[][] grid) {
			
			if(grid.length == 0)
				return 0;
			
			int row = grid.length;
			int col = grid[0].length;
			
			Queue<int[]> path = new LinkedList<>();
			int[] pe = {row-1,0,grid[row-1][0]};
			path.add(pe);
			
			int max = 0;
			
			while(!path.isEmpty()) {
				
				int[] p = path.poll();
				if(p[0] == 0 && p[1] == col-1)
					max = Math.max(max, p[2]);
				if(p[0]-1 >= 0)
					path.add(new int[] {p[0]-1,p[1],p[2]+grid[p[0]-1][p[1]]});
				if(p[1]+1 < col)
					path.add((new int[] {p[0],p[1]+1,p[2]+grid[p[0]][p[1]+1]}));
				
			}
			
			return max;
			
		}

		public static boolean doTestsPass() {
			boolean result = true;
			result &= optimalPath(new Integer[][] { { 0, 0, 0, 0, 5 }, { 1, 1, 1, 1, 0 }, { 2, 0, 0, 0, 0 } }) == 11;
			return result;
		}

		public static void main(String[] args) {
			if (doTestsPass()) {
				System.out.println("All tests pass");
			} else {
				System.out.println("Tests fail.");
			}
		}
	}
