class LRUCache {

    Map<Integer,Integer> cache;
    int maxCapacity;
    
    public LRUCache(int capacity) {
        cache = new LinkedHashMap<>();
        maxCapacity = capacity;
    }
    
    public int get(int key) {
        
        if(!cache.containsKey(key))
            return -1;
        
        int cacheValue = cache.remove(key);
        cache.put(key,cacheValue);
        return cacheValue;
        
    }
    
    public void put(int key, int value) {
        
        if(cache.containsKey(key))
            cache.remove(key);
        else{
            if(cache.size() == maxCapacity)
            {
              Iterator<Map.Entry<Integer,Integer>> itr =                                                            cache.entrySet().iterator();
              itr.next();
              itr.remove(); 
            }  
        }
         cache.put(key,value); 
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
