class Trie {

    Node root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new Node('\0');
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        
        Node current = root;
        char[] wordc = word.toCharArray();
        
        for(int i=0;i<wordc.length;i++)
        {
            int index = wordc[i]-'a';
            if(current.children[index] == null)
                current.children[index]= new Node(wordc[i]);
            
            current = current.children[index];
        }
        current.isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        
       Node node = searchOrStartsWith(word);
    
       return node!=null && node.isWord;
           
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        
        if(searchOrStartsWith(prefix) != null)
            return true;
        
        return false;
        
    }
    
    public Node searchOrStartsWith(String word)
    {
        Node current = root;
        char[] wordc = word.toCharArray();
        
        for(int i=0;i<wordc.length;i++)
        {
            int index=wordc[i]-'a';
            if(current.children[index] == null || current.children[index].c != wordc[i])
                return null;
            current = current.children[index];
        }
        
        return current;
    
    }
    
    
    
}

class Node{
    
    char c;
    boolean isWord;
    Node[]  children;
    
    public Node(char c){
        this.c = c;
        isWord = false;
        children = new Node[26];
    }
    
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
