import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 *  
 *  e.g.
 *      for the input: "abbbccda" the longest uniform substring is "bbb" (which starts at index 1 and is 3 characters long).
 */
public class LongestUniformSubstring {

		
		  private static final Map<String, int[]> testCases = new HashMap<String, int[]>();

		  static int[] longestUniformSubstring(String input){
			  
			if(input == null || input.length() == 0)
				return new int[]{-1,0};
			
			int LongestStart = -1;
			int LongestLength = 0;
			char[] c = input.toCharArray();
			int start =0;
			int count =1;
			for(int i=0;i<c.length-1;i++)
			{
				if(c[i] == c[i+1])
				  count++;
				else
				{
					if(LongestLength < count)
					{
						LongestLength = count;
						LongestStart = start;
					}
					start = i+1;
					count = 1;
				}
					
			}
			
			if(LongestLength < count)
			{
				LongestLength = count;
				LongestStart = start;
			}
			return new int[] {LongestStart,LongestLength};
		  }

		  public static void main(String[] args) {
		    testCases.put("", new int[]{-1, 0});
		    testCases.put("10000111", new int[]{1, 4});
		    testCases.put("aabbbbbCdAA", new int[]{2, 5});

		    boolean pass = true;
		    for(Map.Entry<String,int[]> testCase : testCases.entrySet()){
		      int[] result = longestUniformSubstring(testCase.getKey());
		      pass = pass && (Arrays.equals(result, testCase.getValue()));
		    }
		    if(pass){
		      System.out.println("Pass!");
		    } else {
		      System.out.println("Failed! ");
		    }
		  }
	}


