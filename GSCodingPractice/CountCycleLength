package com.gs.medium;

import java.util.*;

public class CountLengthOfCycle {

	  /**
	   *
	   * You have an integer array.
	   * Starting from arr[startIndex], follow each element to the index it points to. 
	   * Continue to do this until you find a cycle. 
	   * Return the length of the cycle. If no cycle is found return -1
	   *
	  */
		
		
	  public static int countLengthOfCycle( int[] arr, int startIndex ) {
		
		  Set<Integer> seen = new HashSet<>();
		  int next = arr[startIndex];
		  seen.add(next);
		  for(int i=0;i<arr.length;i++)
		  {
			  next=arr[next];
			  if(seen.contains(next)) {
				  return findLoopLength(arr, next);
			  }
			  seen.add(next);
			 
		  }
		  
		  System.out.println("Returning :" + -1);
		  return -1;
		  
	  }
	  
	  public static int findLoopLength(int[] arr, int index) {
		  int len = 1;
		  
		  int start = index;
		  while(start != arr[index]) {
			 len++;
			 index = arr[index];
		  }
		  
		  System.out.println("The length of loop :"+ len);
		  return len;
			 
		  
	  }


	  public static void main( String[] args ) {

	 boolean testsPassed = true;
	  
	  testsPassed &= countLengthOfCycle(new int[]{1, 0}, 0) == 2;
	  testsPassed &= countLengthOfCycle(new int[]{1, 2, 0}, 0) == 3;
	  testsPassed &= countLengthOfCycle(new int[]{1, 4,2,0,3}, 0) == 4;
	  testsPassed &= countLengthOfCycle(new int[]{1,2,3,4,3}, 0) == 2;
	  testsPassed &= countLengthOfCycle(new int[]{1,3,4,2,3}, 0) == 3;
	  
	  if(testsPassed) {
	    System.out.println( "Test passed." );
	    //return true;
	  } else {
	    System.out.println( "Test failed." );
	    //return false;
	  }


	  }
	}
