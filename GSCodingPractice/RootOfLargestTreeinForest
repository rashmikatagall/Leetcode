package com.gs.high;

import java.util.*;

public class RootOfLargestTree {
	/*
	**  Instructions:
	**
	**  Given a forest ( one or more disconnected trees ), find the root of largest tree
	**  and return its Id. If there are multiple such roots, return the smallest Id of them.
	**
	**  Complete the largestTree function in the editor below.
	**  It has one parameter, immediateParent, which is a map containing key-value pair indicating
	**  child -> parent relationship. The key is child and value is the corresponding
	**  immediate parent.
	**  Constraints
	**    - Child cannot have more than one immediate parent.
	**    - Parent can have more than one immediate child.
	**    - The given key-value pair forms a well-formed forest ( a tree of n nodes will have n-1 edges )
	**
	**  Example:
	**
	**  Input:
	**  { { 1 -> 2 }, { 3 -> 4} }
	**
	**  Expected output: 2
	**  Explanation: There are two trees one having root of Id 2 and another having root of Id 4.
	**  Both trees have size 2. The smaller number of 2 and 4 is 2. Hence the answer is 2.
	*/

	  /*
	  **  Find the largest tree.
	  */
	  public static Integer largestTree(final Map<Integer,Integer> immediateParent)
	  {
	   
		  Map<Integer,List<Integer>> tree = new HashMap<>();
		  
		  for(Map.Entry<Integer, Integer> adj : immediateParent.entrySet())
		  {
			  int child = adj.getKey();
			  int parent = adj.getValue();
			  
			  System.out.println("Parent : "+parent+" Child :"+ child);
			  boolean parentFound = false; 
			  for(Map.Entry<Integer, List<Integer>> t : tree.entrySet())
			  {
				  if(t.getValue().contains(parent)) {
					 tree.get(t.getKey()).add(child);
					 parentFound = true;
					 break;
				  }
					 
			  }
			  if(parentFound)
				  continue;
			  if(tree.containsKey(parent)) {
				  tree.get(parent).add(child);
			  }
			  else {
				  tree.put(parent,new ArrayList<>());
				  tree.get(parent).add(child);
			  }
			  
			  if(tree.containsKey(child)){
				  
				List<Integer> children =  tree.remove(child);
				tree.get(parent).addAll(children);
				  
			  }
			  
			  tree.entrySet().stream().forEach(System.out::println);
		  }
		  
		  
		int root = tree.entrySet().stream().sorted((e1,e2) -> { if(e1.getValue().size() == e2.getValue().size()) 
			                                           return e1.getKey()-e2.getKey();
		                                             else
		                                            	return e2.getValue().size()-e1.getValue().size();}
		                                             )
		                           .map(e -> e.getKey()).findFirst().get();
		System.out.println("Root of the largest tree is :"+ root);
		
		return root;
		  
		  
		  
		  
	  }

	  /*
	  **  Returns true if the tests pass. Otherwise, returns false;
	  */
	  public static boolean doTestsPass()
	  {
	    // map of test cases to expected results
	    final Map<Map<Integer,Integer>, Integer> testCases = new HashMap<>();

	   // example
	    final Map<Integer,Integer> testCaseOneKey = new HashMap<>();
	    testCaseOneKey.put(1,2);
	    testCaseOneKey.put(3,4);
	   
	    testCases.put(testCaseOneKey, 2);

	    // More than two trees
	    final Map<Integer,Integer> testCaseTwoKey = new HashMap<>();
	    testCaseTwoKey.put( 2, 3 );
	    testCaseTwoKey.put( 7, 8 );
	    testCaseTwoKey.put( 12, 15 );
	    testCaseTwoKey.put( 3, 1 );
	    testCaseTwoKey.put( 13, 15 );
	    testCaseTwoKey.put( 11, 15 );
	    testCaseTwoKey.put( 9, 8 );
	    testCaseTwoKey.put( 5, 12 );
	  
	    testCases.put(testCaseTwoKey, 15);

	    // really large index values
	    final Map<Integer,Integer> testCaseThreeKey = new HashMap<>();
	    testCaseThreeKey.put( 200000000, 300000000 );
	    testCaseThreeKey.put( 500000000, 200000000 );
	    testCaseThreeKey.put( 700000000, 300000000 );
	    testCaseThreeKey.put( 600000000, 700000000 );
	    testCaseThreeKey.put( 900000000, 400000000 );
	    testCaseThreeKey.put( 100000000, 400000000 );
	    testCaseThreeKey.put( 800000000, 400000000 );
	    testCaseThreeKey.put( 1000000000, 400000000 );
	    
	    testCases.put(testCaseThreeKey, 300000000);

	    // two trees of same size
	   final Map<Integer,Integer> testCaseFourKey = new HashMap<>();
	   testCaseFourKey.put( 9, 4 );
	   testCaseFourKey.put( 1, 4 );
	   testCaseFourKey.put( 5, 2 );
	   testCaseFourKey.put( 8, 4 );
	   testCaseFourKey.put( 7, 3 );
	   testCaseFourKey.put( 2, 3 );
	   testCaseFourKey.put( 6, 7 );
	   testCaseFourKey.put( 10, 4 );
	  
	    testCases.put(testCaseFourKey, 3);

	    // tree sizes differ by one
	    final Map<Integer,Integer> testCaseFiveKey = new HashMap<>();
	    testCaseFiveKey.put( 35, 33 );
	    testCaseFiveKey.put( 33, 28 );
	    testCaseFiveKey.put( 31, 22 );
	    testCaseFiveKey.put( 28, 25 );
	    testCaseFiveKey.put( 34, 31 );
	    testCaseFiveKey.put( 29, 27 );
	    testCaseFiveKey.put( 21, 23 );
	    testCaseFiveKey.put( 25, 21 );
	    testCaseFiveKey.put( 22, 29 );
	
	    testCases.put(testCaseFiveKey, 23);

	        boolean passed = true;
	    for(Map.Entry<Map<Integer,Integer>, Integer> entry : testCases.entrySet())
	    {
	      final Integer actual = largestTree(entry.getKey());
	      if(!actual.equals(entry.getValue()))
	      {
	        passed = false;
	        System.out.println("Failed for " + entry.getKey().toString() + "\n  expected " + entry.getValue() + ", actual " + actual);
	      }
	    }

	    return passed;
	  }

	  /*
	  **  Execution entry point.
	  */
	  public static void main(String[] args)
	  {
	    // Run the tests
	    if(doTestsPass())
	    {
	      System.out.println("All tests pass");
	    }
	    else
	    {
	      System.out.println("Tests fail.");
	    }
	  }
	}
